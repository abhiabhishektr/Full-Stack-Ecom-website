<%-include("../layout/userHeader")%>







<main class="main">
  <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
    <div class="container">
      <h1 class="page-title">My Account<span>Shop</span></h1>
    </div><!-- End .container -->
  </div><!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav mb-3">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="index.html">Home</a></li>
                <li class="breadcrumb-item"><a href="#">Shop</a></li>
                <li class="breadcrumb-item active" aria-current="page">My Account</li>
            </ol>
        </div><!-- End .container -->
    </nav><!-- End .breadcrumb-nav -->

    <div class="page-content">
      <div class="dashboard">
          <div class="container">
            <div class="row">
              <aside class="col-md-4 col-lg-3">
                <ul class="nav nav-dashboard flex-column mb-3 mb-md-0" role="tablist">
            <li class="nav-item"> 
                <a class="nav-link " id="tab-dashboard-link"  href="/profile?tab=dashboard" role="tab" aria-controls="tab-dashboard" aria-selected="true">User Details</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" id="tab-orders-link"  href="/profile?tab=orders" role="tab" aria-controls="tab-orders" aria-selected="false">Orders</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="tab-downloads-link"  href="/profile?tab=downloads" role="tab" aria-controls="tab-downloads" aria-selected="false">Downloads</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="tab-address-link"  href="/profile?tab=address" role="tab" aria-controls="tab-address" aria-selected="false">Adresses</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="tab-account-link"  href="/profile?tab=wallet" role="tab" aria-controls="tab-account" aria-selected="false">Wallet Details</a>
            </li>
            <li class="nav-item">
                <a style="color: rgb(23, 108, 253);" class="nav-link" href="#">Sign Out</a>
            </li>
        </ul>
              </aside><!-- End .col-lg-3 -->

              <div class="col-md-8 col-lg-9">
                <div class="tab-content">
            <div class="tab-pane fade show active" id="#tab-address" role="tabpanel" aria-labelledby="tab-dashboard-link">





              <div class="container mt-4">
                <div class="row">
                  <div class="col-md-12">
              
                    <!-- Loop through orders -->
                    <% orders.forEach(order => { %>
              
                      <!-- Bootstrap Card -->
                      <div class="card mb-4" style="width: 100%;">
                        <div class="card-body">
              
                          <!-- Order Details -->
                          <h5 class="card-title">Order #<%= order._id %></h5>
                          <p class="card-text">Customer: <%= order.address.firstName %> <%= order.address.lastName %></p>
                          <p class="card-text">Date: <%= new Date(order.date).toDateString() %></p>
              

                          
<!-- Products -->
<% order.Products.forEach(product => { %>
  <div class="media">
    <!-- Image -->
    <img src="/uploads/<%= product.image %>" alt="Product Image" class="mr-3" style="max-width: 100px; max-height: 100px; object-fit: cover;">
    <div class="media-body d-flex flex-column align-items-start">
      <!-- Product Details -->
      <h5 class="mt-0"><%= product.name %></h5>
      <p style="margin: 0;">Quantity: <%= product.quantity %></p>
      <p style="margin: 0;">Total: $<%= product.total %></p>
      <p style="margin: 0;">orderStatus : <%= product.orderStatus %></p>
      <!-- Add more product details as needed -->

      <!-- Button for Cancel/Return based on order status -->
      <% if (product.orderStatus === 'placed') { %>
        <button type="button" class="btn btn-danger align-self-start mt-2" onclick="handleOrderAction('<%= order._id %>','<%= product._id %>', 'cancel')">Cancel</button>
      <% } else if (product.orderStatus === 'delivered') { %>
        <button type="button" class="btn btn-warning align-self-start mt-2" onclick="handleOrderAction('<%= order._id %>','<%= product._id %>', 'return')">Return</button>
      <% } %>

    </div>
  </div>
<% }); %>

              
                          <!-- Additional Order Details -->
                          <p class="card-text" style="margin: 0;">Payment Mode: <%= order.paymentMode %></p>
                          <p class="card-text" style="margin: 0;">Subtotal: $<%= order.subtotal %></p>
              
                          <!-- Address Details -->
                          <p class="card-text" style="margin: 0;">Address: <%= order.address.streetAddress1 %>, <%= order.address.townCity %>, <%= order.address.stateCounty %> <%= order.address.postcodeZIP %></p>
                          <p class="card-text" style="margin: 0;">Phone: <%= order.address.phone %></p>
              
                        </div>
                      </div>
              
                    <% }); %>
                    
                  </div>
                </div>
              </div>
              



              
              </div>  
              </div><!-- End .col-lg-9 -->
            </div><!-- End .row -->
          </div><!-- End .container -->
        </div><!-- End .dashboard -->
    </div><!-- End .page-content -->
  </div><!-- End .page-content -->
</main><!-- End .main -->

</div><!-- End .page-wrapper -->
<button id="scroll-top" title="Back to Top"><i class="icon-arrow-up"></i></button>

<!-- Mobile Menu -->  
<div class="mobile-menu-overlay"></div><!-- End .mobil-menu-overlay -->

<div class="mobile-menu-container">

</div><!-- End .mobile-menu-container -->

<!-- Sign in / Register Modal -->
<div class="modal fade" id="signin-modal" tabindex="-1" role="dialog" aria-hidden="true">

</div><!-- End .modal -->











<script>

  function handleOrderAction(orderId,productId, action) {
      let actionText;
  
      if (action === 'cancel') {
          actionText = 'cancel';
      } else if (action === 'return') {
          actionText = 'return';
      }
  
      Swal.fire({
          title: 'Are you sure?',
          text: `You are about to ${actionText} your order. We're sad to see you go.`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, proceed',
          cancelButtonText: 'No, keep my order',
          input: 'text',
          inputPlaceholder: 'Enter your reason here',
          preConfirm: async (reason) => {
              if (!reason) {
                  Swal.showValidationMessage('Please enter a reason for the cancellation');
              } else {
                  const response = await fetch(`/orderStatusUpdation/${orderId}`, {
                      method: 'PUT',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({ 
                        reason: reason,
                        productId:productId
                      
                      }),
                  });
  
                  if (response.ok) {
                      Swal.fire('Updated!', `Your ${actionText} request has been submitted`, 'success');
                      // window.location.reload()
                      const urlWithTabParam = window.location.href.split('?')[0] + '?tab=orders';
                      window.location.href = urlWithTabParam;
                  } else {
                      Swal.showValidationMessage('Failed to submit your request');
                  }
              }
          }
      });
  }
  
  </script>





















<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
	  function removefromorder(orderId,productid) {
        // Show SweetAlert confirmation dialog
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to cancel the order. This action cannot be undone!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!',
        }).then((result) => {
            if (result.isConfirmed) {
                // If user clicks "Yes" on the confirmation dialog

                // Make a fetch request to your server to cancel the product from the order
                fetch(`/cancelOrder/${orderId}/${productid}`, {
                    method: 'POST',
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle the response from the server
                        console.log('Order cancelled successfully:', data);

                        // Show SweetAlert success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled!',
                            text: 'Your order has been cancelled successfully.',
                        }).then(() => {
						window.location.reload()
                        });
                    })
                    .catch(error => {
                        // Handle errors
                        console.error('There was a problem cancelling the order:', error.message);

                        // Show SweetAlert error message
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'There was a problem cancelling the order. Please try again.',
                        });
                    });
            }
        });
    }


	function returnRequest(orderId, productid) {
    // Disable the button
    const returnRequestButton = document.getElementById('returnRequestButton'); // Replace 'returnRequestButton' with the actual ID or class of your button
    returnRequestButton.disabled = true;

    // Show SweetAlert confirmation dialog with input field for the reason
    Swal.fire({
        title: 'Return Request',
        text: 'Please provide a reason for the return:',
        input: 'text',
        inputPlaceholder: 'Enter reason...',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Submit',
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const reason = result.value;

            // Make a fetch request to your server to handle the return request
            fetch(/returnrequest/${orderId}/${productid}, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ reason }),
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Return request submitted successfully:', data);

                    // Show SweetAlert success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Request Submitted!',
                        text: 'Your return request has been submitted successfully.',
                    }).then(() => {
                        // Enable the button after the SweetAlert is closed
                        returnRequestButton.disabled = false;
                        window.location.reload();
                    });
                })
                .catch(error => {
                    console.error('There was a problem submitting the return request:', error.message);

                    // Show SweetAlert error message
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'There was a problem submitting the return request. Please try again.',
                    }).then(() => {
                        // Enable the button after the SweetAlert is closed
                        returnRequestButton.disabled = false;
                    });
                });
        } else {
            // Enable the button if the user cancels the SweetAlert
            returnRequestButton.disabled = false;
        }
    });
}


</script>


<%-include("../layout/userFoot")%>